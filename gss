Overview
HC360 is currently using OAuth 1.0a, and it is being deprecated by the Authinator team inline with industry standards.  This guide is intended to elaborate on the changes needed to migrate HC360 to OAuth2.  The HC360 web app as a whole will require a paradigm change in how the UI and API interact with one another, which mostly impacts the user access flows.  Protected resources do not necessarily need code changes to advance to OAuth2, since the JWT being generated by the gateway does not effectively change.  Only the consumers (who could also be a protected resource) will require changes to leverage OAuth2 in its outbound calls to protected resources.

Web Application
The Authinator team has published a recommended pattern for securing a web app with a signed OAuth2 JWT.  This approach removes the proxy, and continues to rely on a server-side cookie being set to a defined name to be used on subsequent Authinator routing requests.  Because the gateway cannot handle requests without a bearer token, the UI will need to request a non-expiring (and irrevocable) anonymous token on behalf of a consumer key in order to access the anonymous endpoints via the Authinator gateway. 

One caveat is that the gateway needs to either accept CORS requests, or the UI needs to proxy api requests to the same domain that it sits on, so that secure cookies are accessible from the gateway.  Today, the HC360 UI uses irules to forward requests matching a certain pattern to the proxy in order to keep the domain between the UI and API's the same.  This same tactic can be used while HC360 is hosted on PCF.  However, when the HC360 is migrated to AWS cloud, then irules will not be a supported option.  So, an alternative solution like nginx proxy or having api gateway accept CORS headers will need to be instituted for this to work.



Scope of changes:

HC360 UI
Needs to call for on app startup for anonymous token (not user specific), and it will be set as the bearerToken cookie (or UI can pass as the auth header to override) on any non-authenticated requests.
POST /v1/auth/accessTokens/anonymous
Needs to proxy api calls to the same domain
Do not store authenticated access tokens
Point to new auth sourced /settings endpoint (renamed to hc360/v1/auth/ui-settings)
Potentially setup nginx proxy (discussion needed)
HC360 Proxy - Deprecated
Repurpose proxy consumer key to be the ui consumer key. Access needed should be similar to what it is today.
Enable appropriate anonymous access to auth api on consumer key
Login
SSO
Registration
Password Reset
HC360 Auth
Add cookie support
Set (httponly+secure) "bearerToken" cookie for all non-anonymous access tokens minted
Add remember device criteria, headers and cookie support previously handled by the proxy
SSO
Update the proxy params and payload to be accepted directly from auth api under a anonymous scope
Update SSO metadata on ADFS and Core Authinator
Potentially update SSO to use Okta instead of ADFS
Add UI config server scope to common properties
Expose the UI unauthenticated (or make it an authenticated) settings endpoint.
Assuming its to be unauthenticated, a new anonymous protected resource will need to be added.


HTTP Consumer
The Authinator team has published the changes required to upgrade an existing OAuth1 consumer to OAuth2. 

in most cases, this will require one story with three steps:

Update OAuth dependencies in Maven POM.
Update application properties for the consumer.
Update REST client configuration to utilize OAuth2.
NOTE: If the API is not Spring Boot 2.1 or greater than a Spring Boot upgrade is needed first.
